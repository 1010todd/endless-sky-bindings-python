diff --git a/source/Audio.cpp b/source/Audio.cpp
index a348510f..9ed4610f 100644
--- a/source/Audio.cpp
+++ b/source/Audio.cpp
@@ -160,9 +160,16 @@ void Audio::Init(const vector<string> &sources)
 			}
 		}
 	}
+
+#ifndef ES_NO_THREADS
 	// Begin loading the files.
 	if(!loadQueue.empty())
 		loadThread = thread(&Load);
+#else
+	// emscripten-compiled code freezes here in the browser
+	// so just load synchronously
+	Load();
+#endif
 	
 	// Create the music-streaming threads.
 	currentTrack.reset(new Music());
diff --git a/source/Dictionary.h b/source/Dictionary.h
index f083bae7..bb0d6155 100644
--- a/source/Dictionary.h
+++ b/source/Dictionary.h
@@ -23,7 +23,7 @@ PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 // that prioritizes fast lookup time at the expense of longer construction time
 // compared to an STL map. That makes it suitable for ship attributes, which are
 // changed much less frequently than they are queried.
-class Dictionary : private std::vector<std::pair<const char *, double>> {
+class Dictionary : public std::vector<std::pair<const char *, double>> {
 public:
 	// Access a key for modifying it:
 	double &operator[](const char *key);
diff --git a/source/GameWindow.cpp b/source/GameWindow.cpp
index a7327023..6f714d34 100644
--- a/source/GameWindow.cpp
+++ b/source/GameWindow.cpp
@@ -424,6 +424,7 @@ void GameWindow::ExitWithError(const string& message, bool doPopUp)
 		box.title = "Endless Sky: Error";
 		box.message = message.c_str();
 		box.colorScheme = nullptr;
+		printf("Error: %s\n", message.c_str());
 		
 		SDL_MessageBoxButtonData button;
 		button.flags = SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT;
diff --git a/source/ImageBuffer.cpp b/source/ImageBuffer.cpp
index f7254903..2e878e02 100644
--- a/source/ImageBuffer.cpp
+++ b/source/ImageBuffer.cpp
@@ -287,7 +287,7 @@ namespace {
 #pragma GCC diagnostic pop
 		
 		jpeg_stdio_src(&cinfo, file);
-		jpeg_read_header(&cinfo, true);
+		jpeg_read_header(&cinfo, TRUE);
 		cinfo.out_color_space = JCS_EXT_RGBA;
 		
 		// MAYBE: Reading in lots of images in a 32-bit process gets really hairy using the standard approach due to
diff --git a/source/SpriteQueue.cpp b/source/SpriteQueue.cpp
index 1149c668..0827ddf0 100644
--- a/source/SpriteQueue.cpp
+++ b/source/SpriteQueue.cpp
@@ -28,9 +28,11 @@ using namespace std;
 // Constructor, which allocates worker threads.
 SpriteQueue::SpriteQueue()
 {
+#ifndef ES_NO_THREADS
 	threads.resize(max(4u, thread::hardware_concurrency()));
 	for(thread &t : threads)
 		t = thread(ref(*this));
+#endif // ES_NO_THREADS
 }
 
 
@@ -39,12 +41,16 @@ SpriteQueue::SpriteQueue()
 SpriteQueue::~SpriteQueue()
 {
 	{
+#ifndef ES_NO_THREADS
 		lock_guard<mutex> lock(readMutex);
+#endif // ES_NO_THREADS
 		added = -1;
 	}
+#ifndef ES_NO_THREADS
 	readCondition.notify_all();
 	for(thread &t : threads)
 		t.join();
+#endif // ES_NO_THREADS
 }
 
 
@@ -53,7 +59,9 @@ SpriteQueue::~SpriteQueue()
 void SpriteQueue::Add(const shared_ptr<ImageSet> &images)
 {
 	{
+#ifndef ES_NO_THREADS
 		lock_guard<mutex> lock(readMutex);
+#endif // ES_NO_THREADS
 		// Do nothing if we are destroying the queue already.
 		if(added < 0)
 			return;
@@ -61,7 +69,11 @@ void SpriteQueue::Add(const shared_ptr<ImageSet> &images)
 		toRead.push(images);
 		++added;
 	}
+#ifndef ES_NO_THREADS
 	readCondition.notify_one();
+#else
+	this->operator()();
+#endif // ES_NO_THREADS
 }
 
 
@@ -69,7 +81,9 @@ void SpriteQueue::Add(const shared_ptr<ImageSet> &images)
 // Unload the texture for the given sprite (to free up memory).
 void SpriteQueue::Unload(const string &name)
 {
+#ifndef ES_NO_THREADS
 	unique_lock<mutex> lock(loadMutex);
+#endif // ES_NO_THREADS
 	toUnload.push(name);
 }
 
@@ -78,8 +92,12 @@ void SpriteQueue::Unload(const string &name)
 // Find out our percent completion.
 double SpriteQueue::Progress()
 {
+#ifndef ES_NO_THREADS
 	unique_lock<mutex> lock(loadMutex);
 	return DoLoad(lock);
+#else
+	return DoLoad();
+#endif // ES_NO_THREADS
 }
 
 
@@ -87,6 +105,7 @@ double SpriteQueue::Progress()
 // Finish loading.
 void SpriteQueue::Finish()
 {
+#ifndef ES_NO_THREADS
 	// Loop until done loading.
 	while(true)
 	{
@@ -100,6 +119,7 @@ void SpriteQueue::Finish()
 		// disk yet. Wait until one arrives.
 		loadCondition.wait(lock);
 	}
+#endif // ES_NO_THREADS
 }
 
 
@@ -107,6 +127,7 @@ void SpriteQueue::Finish()
 // Thread entry point.
 void SpriteQueue::operator()()
 {
+#ifndef ES_NO_THREADS
 	while(true)
 	{
 		unique_lock<mutex> lock(readMutex);
@@ -143,12 +164,30 @@ void SpriteQueue::operator()()
 		
 		readCondition.wait(lock);
 	}
+#else
+	// To signal this thread that it is time for it to quit, we set
+	// "added" to -1.
+	if(added < 0)
+		return;
+	if(toRead.empty())
+		return;
+
+	// Extract the one item we should work on reading right now.
+	shared_ptr<ImageSet> imageSet = toRead.front();
+	toRead.pop();
+	imageSet->Load();
+	toLoad.push(imageSet);
+#endif // ES_NO_THREADS
 }
 
 
-
+#ifndef ES_NO_THREADS
 double SpriteQueue::DoLoad(unique_lock<mutex> &lock)
+#else
+double SpriteQueue::DoLoad()
+#endif // ES_NO_THREADS
 {
+#ifndef ES_NO_THREADS
 	while(!toUnload.empty())
 	{
 		Sprite *sprite = SpriteSet::Modify(toUnload.front());
@@ -177,6 +216,25 @@ double SpriteQueue::DoLoad(unique_lock<mutex> &lock)
 	// Wait until we have completed loading of as many sprites as we have added.
 	// The value of "added" is protected by readMutex.
 	unique_lock<mutex> readLock(readMutex);
+#else
+	while(!toUnload.empty())
+	{
+		Sprite *sprite = SpriteSet::Modify(toUnload.front());
+		toUnload.pop();
+
+		sprite->Unload();
+	}
+	for(int i = 0; !toLoad.empty() && i < 100; ++i)
+	{
+		// Extract the one item we should work on uploading right now.
+		shared_ptr<ImageSet> imageSet = toLoad.front();
+		toLoad.pop();
+
+		imageSet->Upload(SpriteSet::Modify(imageSet->Name()));
+
+		++completed;
+	}
+#endif // ES_NO_THREADS
 	// Special cases: we're bailing out, or we are done.
 	if(added <= 0 || added == completed)
 		return 1.;
diff --git a/source/SpriteQueue.h b/source/SpriteQueue.h
index e8005f21..f69bf719 100644
--- a/source/SpriteQueue.h
+++ b/source/SpriteQueue.h
@@ -57,20 +57,28 @@ public:
 	
 	
 private:
+#ifndef ES_NO_THREADS
 	double DoLoad(std::unique_lock<std::mutex> &lock);
-	
-	
+#else
+	double DoLoad();
+#endif // ES_NO_THREADS
+
+
 private:
 	// These are the image sets that need to be loaded from disk.
 	std::queue<std::shared_ptr<ImageSet>> toRead;
+#ifndef ES_NO_THREADS
 	std::mutex readMutex;
 	std::condition_variable readCondition;
+#endif // ES_NO_THREADS
 	int added = 0;
 	
 	// These image sets have been loaded from disk but have not been uplodaed.
 	std::queue<std::shared_ptr<ImageSet>> toLoad;
+#ifndef ES_NO_THREADS
 	std::mutex loadMutex;
 	std::condition_variable loadCondition;
+#endif // ES_NO_THREADS
 	int completed = 0;
 	
 	// These sprites must be unloaded to reclaim GPU memory.
diff --git a/source/main.cpp b/source/main.cpp
index ddd2db4c..7c4a2f55 100644
--- a/source/main.cpp
+++ b/source/main.cpp
@@ -61,7 +61,7 @@ void InitConsole();
 
 
 // Entry point for the EndlessSky executable
-int main(int argc, char *argv[])
+int maine(int argc, char *argv[])
 {
 	// Handle command-line arguments
 #ifdef _WIN32
@@ -159,6 +159,10 @@ int main(int argc, char *argv[])
 	return 0;
 }
 
+int main(int argc, char *argv[]) {
+	return maine(argc, argv);
+}
+
 void GameLoop(PlayerInfo &player, const Conversation &conversation, const string &testToRunName, bool debugMode)
 {
 	// gamePanels is used for the main panel where you fly your spaceship.
