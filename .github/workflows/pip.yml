name: Pip

on:
  workflow_dispatch:
  pull_request:
  push:
  release:
    types:
      - published

jobs:
  wheel_mac_and_windows:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ["3.8", "3.9"]
          #python-version: ["3.9"]
        include-libraries: [include]
        threading: ["no-threads"]
        include:
          - os: macos-latest
            python-version: "3.9"
            include-libraries: system
            threading: no-threads

    runs-on: ${{ matrix.os }}

    env:
      DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
      DIR_ESLIB: .\dev64
      AR: ${{ matrix.os == 'windows-latest' && 'gcc-ar' || '' }}
      ES_SETUP_INCLUDE_LIBRARIES: ${{ matrix.include-libraries == 'include' && '1' || '0' }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: patch to make threadless
      if: matrix.threading == 'no-threads'
      working-directory: ./endless_sky/endless-sky
      shell: bash
      run: patch -p1 < ../../patch.diff
#cd endless-sky/; git clean -dxf; git stash

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Mac dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install libmad libpng jpeg-turbo SDL2 openal-soft

    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev uuid-dev

    - name: Fetch Windows development libraries
      if: matrix.os == 'windows-latest'
      run: |
        # thanks MCO
        Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
        Expand-Archive win64-dev.zip -DestinationPath . -Force
        Remove-Item win64-dev.zip

    - name: specify mingw compiler to setuptools
      if: matrix.os == 'windows-latest'
      run: |
        "[build]`ncompiler=mingw32`n" | Out-File -FilePath setup.cfg

    - name: Copy libraries from OS into lib and include
      if: matrix.include-libraries == 'include'
      run: python grab_libraries.py

    - name: Add requirements
      # TODO I don't know that we need half of these, like wheel
      run: python -m pip install --upgrade wheel setuptools pytest pybind11 build

    - name: wheel
      # builds both apparently
      run: python -m build

    # just for debugging various sdists and wheels
    - uses: actions/upload-artifact@v2
      with:
        name: dist-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.include-libraries }}
        path: dist/

    - name: Install
      shell: bash
      run: pip install ./dist/*.whl

    - name: checking for timeout on interpreter exit
      working-directory: ./tests
      run: python run_with_timeout.py python testing.py

    - name: Test
      run: pytest

    - name: Upload wheels
      if: ${{ ! ((matrix.os == 'macos-latest' && matrix.include-libraries == 'system') || matrix.os == 'ubuntu-latest') }}
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.whl

  wheel_manylinux:
    runs-on: ubuntu-latest

    env:
      DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
      DIR_ESLIB: .\dev64
      AR: ${{ matrix.os == 'windows-latest' && 'gcc-ar' || '' }}
      ES_SETUP_INCLUDE_LIBRARIES: ${{ matrix.include-libraries == 'include' && '1' || '0' }}

    steps: 
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Add requirements
      # TODO I don't know that we need half of these, like wheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade twine wheel setuptools pytest pybind11 build

    - name: 
      uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
      with:
        python-versions: 'cp38-cp38 cp39-cp39'
        build-requirements: 'pybind'
        system-packages: 'gcc-c++ SDL2-devel libpng-devel libjpeg-turbo-devel mesa-libGL-devel glew-devel openal-soft-devel libmad-devel libuuid-devel'
        pre-build-command: 'sh pre-build-script.sh'
        pip-wheel-args: '-w ./dist --no-deps'

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: dist/*-manylinux*.whl

  sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    # Note ES_SETUP_INCLUDE_LIBRARIES is NOT set, so the uploaded sdist will
    # never include system libraries in /endless_sky/lib and endless_sky/include

    - name: patch to make threadless
      working-directory: ./endless_sky/endless-sky
      shell: bash
      run: patch -p1 < ../../patch.diff

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz

  upload_all:
    name: Upload if release
    needs: [wheel_mac_and_windows, wheel_manylinux, sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v2

    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  test_wheel:
    name: Test wheels
    needs: [wheel_mac_and_windows, wheel_manylinux]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.9"]
        include-libraries: [include]

    - name: Download wheel
      uses: actions/download-artifact@v2
      with:
        path: dist/*.whl

    - name: Install
      run: ls dist/*.whl

    - name: Test
      run: pytest

